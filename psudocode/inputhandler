Step 1.)
    Use a try and except statement to try to import:
        FileHistory
        AutoSuggestFromHistory
        import prompt_toolkit
        from .database import jsdm, exmgt
        from .help import Help
        import os
        import sys
        from ..Logging import Logger
        import traceback
        from subprocess import Popen, PIPE
        from .use import Use
        from .. import exploit
    Use the except statement to catch ImportError as e:
        from .database import jsdm, exmgt
        from .help import Help
        import os
        import sys
        from ..Logging import Logger
        import traceback
        from subprocess import Popen, PIPE
        from .use import Use
        from .. import exploit
        Logger.__start_logger_object__(str(e))


Step 2.)
  Setup important variables
    install_location = f"/home/{os.getlogin()}/SuperSploit"
    data_install_location = f"{install_location}/.data"
    database = f"{install_location}/.data"
    his = FileHistory(f"{data_install_location}/.history")
    prompt = prompt_toolkit.PromptSession(history=his, auto_suggest=AutoSuggestFromHistory(), enable_history_search=True)

Step 3.)
    class Input(Logger):

        def __init__(self):
            self.inputs = ["show", "update", "set", "add", "del", "help", "search", "use", "run"]
            self.functions = [jsdm.showBD, exmgt.updateDb, jsdm.set, jsdm.add, jsdm.Del, Help.help, exmgt.search, Use.use, exploit.exploit]
            self.encoded_data = b""
            self.get()
            self.handle_data()
            return

        @classmethod
        def configCheck(cls):
            with open(f"{data_install_location}/config.json") as config:
                cls.config = json.load(config)
                config.close()
            cls.shell = cls.config["shell"]
            return

        def get(self) -> None:
            try:
                data = prompt.prompt("[SuperSploit]: ")
                self.encoded_data = data.encode()
                return
            except ImportError:
                data = input("[SuperSploit]: ")
                self.encoded_data = data.encode()
                return

        def handle_data(self):
            dataStr = self.encoded_data.decode()
            try:
                self.functions[self.inputs.index(dataStr.split(" ")[0])](dataStr)
                return True
            except Exception:
                a = traceback.format_exc()
                if "ValueError" in a:
                    if self.shell:
                        try:
                            proc = Popen(dataStr.split(' '), stdin=PIPE, stdout=PIPE, stderr=PIPE)
                            if len(proc.stderr.read().decode()) > 0:
                                print(proc.stderr.read().decode())
                                return
                            print(proc.stdout.read().decode())
                            return
                        except Exception:
                            self.__start_logger_object__(str(traceback.format_exc()))
                            print(traceback.format_exc())
                return