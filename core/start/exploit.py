# python3 module_test.py RHOST='' RPORT='' EXE='' UID=''
import subprocess
try:
    from prompt_toolkit import prompt
    input = prompt
except ImportError:
    pass
integrated = False
from .database import jsdm
import os
install_location = f"/home/{os.getlogin()}/SuperSploit"
tmp_exploit_package_path = f"{install_location}/core/start/integrated_exploits/"

class exploit:

    def __init__(self):
        return

    @classmethod
    def py_setup(cls, vars, db, args):
        if input("Would you like import this exploit as a module [y/n]: ").startswith("y"):
            print(f"Crating module from exploit")
            with open(db["EXPLOIT"], "r") as file:
                fileR = file.read()
                file.close()

            with open(f"{tmp_exploit_package_path}/tmp.py", "w") as fileW:
                fileW.write(fileR)
                fileW.close()

            with open(f"{tmp_exploit_package_path}/__init__.py", "w") as file:
                file.write("from .tmp import exploit")
                file.close()
            print("module Created successfully")
            cls.run_python_exploit_as_module(vars, db)
            return
        print("Running as a python script with subprocees")
        cls.run_python_exploit(vars, db, args)

    @classmethod
    def exploit(cls, da):
        db = jsdm.checkDb()
        file = db["EXPLOIT"]
        vars = []
        args = ""
        typs = ["py"]
        fun = [cls.py_setup]
        print("Reading exploit file")
        with open(file, "r") as rfile:
            data = rfile.read().split("# DETAILS #")
            rfile.close()
            print("Exploit read successfully")
            fileList = str(data[1]).split("\n")
            for z in fileList:
                if fileList.index(z) > 0:
                    if fileList.index(z) == len(fileList) - 1:
                        break
                    vars.append(z.split(" ")[1])
            print("Required arguments loaded")
        for z in vars:
            for k, v in db.items():
                if z == k:
                    args += (f"{k}={v} ")
        print("Argument string created")
        type = file.split("/")[len(file.split('/')) -1].split(".")[1]
        print(f"exploit type: {type}")
        if type in typs:
            fun[typs.index(type)](vars, db, args)

    @classmethod
    def run_python_exploit(cls, vars, db, args):
        from subprocess import run
        run(["python3", f'{db["EXPLOIT"]}', f'{args}'],)
        print("exploit completed")
        return

    @classmethod
    def run_python_exploit_as_module(cls, args, db):
        l = []
        for x in args:
            for k, v in db.items():
                if x == k:
                    l.append(v)
        try:
            print("Trying to import")
            from .integrated_exploits import exploit
            print("imported successfully\nTrying to run..")
            exploit(l)
            print("Exploit completed successfully\nCleaning up")
            subprocess.run(["rm", f"{tmp_exploit_package_path}/tmp.py"])
            with open(f"{tmp_exploit_package_path}/__init__.py", "w") as file:
                file.write("")
                file.close()
            return True
        except Exception as e:
            print(e)
